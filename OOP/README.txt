    При разработке приложений методом ООП используем следующие принципы ООП (для удобства изложения мыслей
представим, что нам необходимо написать программу, которая хранит в себе информацию о всех сотрудниках и вычисляет
их зарплату см. stuff.jpg):
        
        1. Абстрагирование (или абстракция) - используем при построении иерархии классов. В нашем случае используем
	многоуровневую абстракцию, где общий абстрактный тип классов - Employee (работник). Классы-наследники 
	Employee: Personal, Engineer, Manager также абстрактные. В классе Employee описываем общие свойства для любого работника:
	имя, должность, id внутри компании, зарплатуб также любой Employee получает зарплату, поэтому класс Employee имеет
	метод salaryCalc (калькулятор зарплаты), но поскольку начисление ЗП на каждой должности осуществляется
	по-разному, то этот метод в классе Employee тоже абстрактый.
	С помощью абстракции мы выделяем общее для всех объектов.

	2. Инкапсуляция - используем её, чтобы скрыть доступ к атрибутам класса. Таким образом мы объединяем атрибуты объекта в одном
	классе и запрещаем прямой доступ к ним во избежании "поломки". При этом для работы с этими атрибутами предоставляем 
	публичные методы. Например, к атрибутам "имя" и "id внутри компании" прямого доступа из вне мы не имеем, но при этом
	взаимодействовать с этими атрибутами можем при помощи общедоступных методов, описанных в классе (например, различные 
	сеттеры и геттеры для изменения и взятия имени, id т.д). 

	3. Наследование - импользуем уже существующие классы для описания новых. При этом добавив немного нового в класс-наследник,
	получаем совершенно новый класс, имеющий как атрибуты супер-класса, так и свои собственные. Это экономит время, упрощает код.
	Например класс Engineer имеет те же атрибуты, что и класс Employee, но при этом принадлежит двум интерфейсам
	(WorkTime и Project), описывающих зависимость начисления ЗП. Класс Programmer в свою очередь наследует все атрибуты класса 
	Engineer, при этом абстрактный метод начисления ЗП переопределен и из абстрактного превратился в обычный.

	4. Полиморфизм используется при внесении правок в наследуемые атрибуты. Это необходимо для того, чтобы, например, реализоввывать
	один и тот же метод разными способами. Например, класс TeamLeader наследует метод начисления ЗП от класса Programmer,
	но, поскольку подсчет ЗП у Programmer зависит только от количества рабочих часов (нтерфейс WorkTime) и участия в проектах 
	(интерфейс Project), а у TeamLeader ещё и от количества людей в подчинении, то при наследовании TeamLeader'ом метода
	salaryCalc у Programmer'а мы этот метод переопределяем.