	Описываемая ниже клиент-серверная многопользовательская система представляет
собой web-сайт, с помощью которого пользователь может узнать погоду в любой точке 
мира.

	Для реализации данной системы используется многоуровневая архитектура с несколькими
серверами (см. architecture.jpg в папке с домашним заданием). Данная архитектура выбрана, 
потому что данные для отображения погоды наш web-сайт получает от стороннего сервера 
путем получения доступа к API стороннего сервера. 

	Количество серверов нашего web-приложения и стороннего web-приложения (более одного) 
выбрано для повышения надежности системы, а также для возможности дальнейшего "горизонтального" 
развития системы (увеличения количества серверов нашего сайта до нужного количества в случае 
увеличения нагрузки на существующие серверы). Все запросы клиент-сервер между клиентом и группой
серверов проходят через балансировщики нагрузки для распределения нагрузки между серверами.

	Компоненты системы:
	
	1. Клиент (веб браузер) - отправляет запросы на web-сайт (через балансировщик 
	нагрузки) и получает в ответ от сервера готовую HTML-страницу.

	2. Балансировщик нагрузки - связующее звено между клиентом и сервером. Он направляет
	входящие запросы на один из множества серверов приложения, которые являются 
	зеркальными копиями друг друга, и отправляют ответ обратно пользователю. Любой 
	сервер обрабатывает запросы одинаково, так что балансировщик занимается
	распределением заданий, чтобы никакой из них не был перегружен.

	3. Серверы веб-приложения - они выполняют основную бизнес-логику, которая 
	обрабатывает запрос пользователя, получает доступ к API стороннего сервера (через балансировщик 
	нагрузки), обрабатывает	ответ от этого сервера и отправляет HTML-страницу обратно браузеру (клиенту). 
	
	4. Серверы стороннего web-приложения - получают запрос от сервера нашего web-приложения
	на доступ к API, связываются с сервером базы данных (через балансировщик 
	нагрузки) и отправляют ответ (например в .json формате) обратно на наш web-сайт.

	5. Сервер базы данных предоставляет инструменты для организации, добавления, поиска, 
	обновления, удаления и выполнения вычислений над данными.